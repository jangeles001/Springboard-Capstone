/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _notFoundRouteImport } from './routes/__not-found'
import { Route as LandingRouteRouteImport } from './routes/landing/route'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LandingIndexRouteImport } from './routes/landing/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as LandingAboutRouteImport } from './routes/landing/about'
import { Route as DashboardWorkoutsRouteImport } from './routes/dashboard/workouts'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const _notFoundRoute = _notFoundRouteImport.update({
  id: '/__not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingRouteRoute = LandingRouteRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LandingRouteRoute,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const LandingAboutRoute = LandingAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LandingRouteRoute,
} as any)
const DashboardWorkoutsRoute = DashboardWorkoutsRouteImport.update({
  id: '/workouts',
  path: '/workouts',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/landing': typeof LandingRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/workouts': typeof DashboardWorkoutsRoute
  '/landing/about': typeof LandingAboutRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/landing/': typeof LandingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/workouts': typeof DashboardWorkoutsRoute
  '/landing/about': typeof LandingAboutRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/landing': typeof LandingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/landing': typeof LandingRouteRouteWithChildren
  '/__not-found': typeof _notFoundRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/workouts': typeof DashboardWorkoutsRoute
  '/landing/about': typeof LandingAboutRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/landing/': typeof LandingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/landing'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/workouts'
    | '/landing/about'
    | '/auth/'
    | '/dashboard/'
    | '/landing/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/workouts'
    | '/landing/about'
    | '/auth'
    | '/dashboard'
    | '/landing'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/landing'
    | '/__not-found'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/workouts'
    | '/landing/about'
    | '/auth/'
    | '/dashboard/'
    | '/landing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LandingRouteRoute: typeof LandingRouteRouteWithChildren
  _notFoundRoute: typeof _notFoundRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__not-found': {
      id: '/__not-found'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _notFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing/': {
      id: '/landing/'
      path: '/'
      fullPath: '/landing/'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof LandingRouteRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/landing/about': {
      id: '/landing/about'
      path: '/about'
      fullPath: '/landing/about'
      preLoaderRoute: typeof LandingAboutRouteImport
      parentRoute: typeof LandingRouteRoute
    }
    '/dashboard/workouts': {
      id: '/dashboard/workouts'
      path: '/workouts'
      fullPath: '/dashboard/workouts'
      preLoaderRoute: typeof DashboardWorkoutsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardWorkoutsRoute: typeof DashboardWorkoutsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardWorkoutsRoute: DashboardWorkoutsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface LandingRouteRouteChildren {
  LandingAboutRoute: typeof LandingAboutRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteRouteChildren: LandingRouteRouteChildren = {
  LandingAboutRoute: LandingAboutRoute,
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteRouteWithChildren = LandingRouteRoute._addFileChildren(
  LandingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LandingRouteRoute: LandingRouteRouteWithChildren,
  _notFoundRoute: _notFoundRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
